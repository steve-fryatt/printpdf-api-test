REM >Protocol
REM
REM Copyright 2023, Stephen Fryatt (info@stevefryatt.org.uk)
REM
REM This file is part of PrintPDFAPITest:
REM
REM   http://www.stevefryatt.org.uk/risc-os
REM
REM Licensed under the EUPL, Version 1.2 only (the "Licence");
REM You may not use this work except in compliance with the
REM Licence.
REM
REM You may obtain a copy of the Licence at:
REM
REM   http://joinup.ec.europa.eu/software/page/eupl
REM
REM Unless required by applicable law or agreed to in
REM writing, software distributed under the Licence is
REM distributed on an "AS IS" basis, WITHOUT WARRANTIES
REM OR CONDITIONS OF ANY KIND, either express or implied.
REM
REM See the Licence for the specific language governing
REM permissions and limitations under the Licence.


REM Initialise the state of the protocol handler.
:
DEF PROCprotocol_initialise
REM The name of the PrintPDF application
ProtocolPrintPDFName$ = "PrintPDF"

REM The task handle of the PrintPDF application
ProtocolPrintPDFTask% = -1

REM The protocol message numbers.
ProtocolMessagePrintPDFControl% = &5A480

REM The last message MyRef.
ProtocolLastMyRef% = -1

REM The protocol reason codes.
ProtocolReasonSetFilename% = 0
ProtocolReasonSuccess% = 1
ProtocolReasonFailure% = 2

REM The protocol operations.
ProtocolOpNone% = 0
ProtocolOpSendOldFilename% = 1
ProtocolOpSendNewFilename% = 2

ProtocolCurrentOp% = ProtocolOpNone%

REM Initialise the PrintPDF task handle.

PROCprotocol_find_printpdf
PROCmain_wind_set_printpdf_task_handle(ProtocolPrintPDFTask%)
ENDPROC


REM Scan the active tasks for a copy of PrintPDF, and update
REM the stored task handle if found.
:
DEF PROCprotocol_find_printpdf
LOCAL next%, task%, end%

REM Enumerate the currently loaded tasks, looking for an instance
REM of PrintPDF.

next% = 0

WHILE next% >= 0
	SYS "TaskManager_EnumerateTasks", next%, q%, 256 TO next%, end%

	task% = q%

	WHILE task% < end%
		IF FNstring_read(task%!4) = ProtocolPrintPDFName$ THEN
			ProtocolPrintPDFTask% = task%!0
			ENDPROC
		ENDIF

		task% += 16
	ENDWHILE
ENDWHILE
ENDPROC


REM Handle an incoming Message_TaskInitialise, to see if the the
REM new task is an instance of PrintPDF.
REM
REM \param message%	Pointer to the Wimp_Poll block.
:
DEF PROCprotocol_message_task_initialise(message%)
REM We're not interested if there is already an instance of PrintPDF
REM running, as PrintPDF itself will terminate the new task.

IF ProtocolPrintPDFTask% <> -1 THEN ENDPROC

REM Check if the task is PrintPDF, and if so, remember the handle.

IF FNstring_read(message% + 28) <> ProtocolPrintPDFName$ THEN ENDPROC

ProtocolPrintPDFTask% = message%!4
PROCmain_wind_set_printpdf_task_handle(ProtocolPrintPDFTask%)
ENDPROC


REM Handle an incoming Message_TaskCloseDown, checking to see if
REM the passing task is the current instance of PrintPDF.
REM
REM \param message%	Pointer to the Wimp_Poll block.
:
DEF PROCprotocol_message_task_close_down(message%)

REM We're not interested if this isn't PrintPDF.

IF message%!4 <> ProtocolPrintPDFTask% THEN ENDPROC

REM Forget the PrintPDF task handle.

ProtocolPrintPDFTask% = -1
PROCmain_wind_set_printpdf_task_handle(ProtocolPrintPDFTask%)
ENDPROC

REM Handle an incoming Message_PrintPDFControl, processing it
REM accordingly
REM
REM \param message%	Pointer to the Wimp_Poll block.
:
DEF PROCprotocol_message_printpdf_control(message%)
CASE ProtocolCurrentOp% OF
WHEN ProtocolOpSendNewFilename%
	IF message%!12 <> ProtocolLastMyRef% THEN PROCmain_wind_set_info_error("BadMyRef")
	PROCmain_wind_set_info_message("ResponseReceived")

	CASE message%!20 OF
	WHEN ProtocolReasonSuccess%
		PROCmain_wind_set_info_message("ReasonSuccess")
	WHEN ProtocolReasonFailure%
		PROCmain_wind_set_info_message("ReasonFailure")
	OTHERWISE
		PROCmain_wind_set_info_message("BadReason")
	ENDCASE

	ProtocolCurrentOp% = ProtocolOpNone%
	ProtocolLastMyRef% = -1

	APITestAcceptNullPolls% = FALSE

OTHERWISE
	IF ProtocolLastMyRef% <> -1 AND message%!8 <> ProtocolLastMyRef% THEN PROCmain_wind_set_info_error("BadMyRef")
	PROCmain_wind_set_info_error("BadResponse")

	ProtocolCurrentOp% = ProtocolOpNone%
	ProtocolLastMyRef% = -1

	APITestAcceptNullPolls% = FALSE
ENDCASE
ENDPROC


REM Send a Message_PrintPDFControl Set Filename, using the
REM PrintPDF task handle. No response is expected.
DEF PROCprotocol_send_old_message_set_filename
LOCAL name$

name$ = FNmain_wind_get_filename

b%!0 = (28 + LEN(name$)) AND &FC
b%!12 = 0
b%!16 = ProtocolMessagePrintPDFControl%
b%!20 = ProtocolReasonSetFilename%
$(b%+24) = name$ + CHR$(0)
SYS "Wimp_SendMessage", 18, b%, ProtocolPrintPDFTask% TO ,,DataXferSaveDestinationTask%

ProtocolCurrentOp% = ProtocolOpSendOldFilename%
ProtocolLastMyRef% = b%!8

APITestAcceptNullPolls% = TRUE

PROCmain_wind_reset_info
PROCmain_wind_set_info_message("SendOldSetFile")
ENDPROC


REM Send a Message_PrintPDFControl Set Filename, using the
REM PrintPDF task handle. A response is expected.
DEF PROCprotocol_send_new_message_set_filename
LOCAL name$

name$ = FNmain_wind_get_filename

b%!0 = (28 + LEN(name$)) AND &FC
b%!12 = 0
b%!16 = ProtocolMessagePrintPDFControl%
b%!20 = ProtocolReasonSetFilename%
$(b%+24) = name$ + CHR$(0)
SYS "Wimp_SendMessage", 18, b%, ProtocolPrintPDFTask% TO ,,DataXferSaveDestinationTask%

ProtocolCurrentOp% = ProtocolOpSendNewFilename%
ProtocolLastMyRef% = b%!8

APITestAcceptNullPolls% = TRUE

PROCmain_wind_reset_info
PROCmain_wind_set_info_message("SendNewSetFile")
ENDPROC


REM Handle bounced messages sent as part of the various protocols.
REM
REM \param message%	Pointer to the Wimp_Poll data block.
:
DEF PROCprotocol_message_bounce(message%)
CASE ProtocolCurrentOp% OF
WHEN ProtocolOpSendOldFilename%, ProtocolOpSendNewFilename%
	IF message%!12 <> ProtocolLastMyRef% THEN PROCmain_wind_set_info_error("BadMyRef")
	PROCmain_wind_set_info_error("MessageBounced")

	ProtocolCurrentOp% = ProtocolOpNone%
	ProtocolLastMyRef% = -1

	APITestAcceptNullPolls% = FALSE
ENDCASE
ENDPROC


REM Handle Null Events from the Wimp, which are enabled when we're running
REM tests on the API where we don't expect to receive responses.
:
DEF PROCprotocol_null_event

REM Disable Null events.

APITestAcceptNullPolls% = FALSE

REM Complete the operation.

CASE ProtocolCurrentOp% OF
WHEN ProtocolOpSendOldFilename%
	PROCmain_wind_set_info_message("MessageAccepted")

	ProtocolCurrentOp% = ProtocolOpNone%
	ProtocolLastMyRef% = -1

WHEN ProtocolOpSendNewFilename%
	PROCmain_wind_set_info_error("NoResponse")

	ProtocolCurrentOp% = ProtocolOpNone%
	ProtocolLastMyRef% = -1
ENDCASE
ENDPROC